import json
import re
import os
import pandas as pd
from lxml import etree
from tqdm import tqdm

class ElsevierXmlReader(object):
    """Parsing Elsevier articles."""

    def __init__(self, path):
        self.path = path
        self.xml = etree.parse(self.path, etree.XMLParser())

        ns = {"bk": "http://www.elsevier.com/xml/bk/dtd",
              "cals": "http://www.elsevier.com/xml/common/cals/dtd",
              "ce": "http://www.elsevier.com/xml/common/dtd",
              "ja": "http://www.elsevier.com/xml/ja/dtd",
              "mml": "http://www.w3.org/1998/Math/MathML",
              "sa": "http://www.elsevier.com/xml/common/struct-aff/dtd",
              "sb": "http://www.elsevier.com/xml/common/struct-bib/dtd",
              "tb": "http://www.elsevier.com/xml/common/table/dtd",
              "xlink": "http://www.w3.org/1999/xlink",
              "xocs": "http://www.elsevier.com/xml/xocs/dtd",
              "dc": "http://purl.org/dc/elements/1.1/",
              "dcterms": "http://purl.org/dc/terms/",
              "prism": "http://prismstandard.org/namespaces/basic/2.0/",
              "xsi": "http://www.w3.org/2001/XMLSchema-instance"}

        try:
            self.doi = self.xml.xpath('//prism:doi/text()', namespaces=ns)[0]
        except:
            print(self.path, ' is error')

        # getabstract
        abs = self.xml.xpath('//dc:description', namespaces=ns)
        pattern = re.compile(r'<[^>]+>', re.S)
        temp = etree.tostring(abs[0], encoding='utf-8').decode('utf-8')
        text = pattern.sub('', temp).strip('\n ')
        self.abstract = text[0:text.find('\n')]

    def filter(self, string):
        """filter some tags in str"""

        string = re.sub(r'<[^>]+>', '', string, re.S)  # filter tags
        string = re.sub(r'\s{2,}', ' ', string)  # merge text
        string = string.strip()

        return string

    def dic(self):
        """Converting article infomation to dict type."""

        attrib = {"doi": self.doi,
                  "abstract": self.abstract}
        return attrib

import openpyxl

def from_json_to_excel(input_file,output_path):
    xls = openpyxl.Workbook()
    sht = xls.create_sheet("parags", index=0)
    col_i = 1
    with open(input_file,"r",encoding="utf8") as file:
        parag_info = json.load(file)
    for info in parag_info:
        doi = info["doi"]
        parags = info["content"]
        for p_info in parags:
            section_name = p_info["h1"]
            text = p_info["text"]
            sht.cell(col_i, 1, doi)
            sht.cell(col_i, 2, section_name)
            sht.cell(col_i, 3, text)
            col_i += 1
    xls.save(output_path)

def file_to_caption(file):
    fig_caps = dict()
    for article in file:
        figs_ = list()
        for type,info in article.items():
            if type == "doi":
                article_doi = info
            if type == "figure":
                for fig in info:
                    if "caption" in fig.keys():
                        fig_info = dict()
                        caption = fig['caption']
                        label = fig['label']
                        caption = re.sub("\<[^\<\>]+\>","",caption)
                        caption = re.sub("\s+"," ",caption)
                        if caption:
                            # if "creep curve" in caption:
                                fig_info['label'] = label
                                fig_info['caption'] = caption
                                fig_info['high-res'] = fig["high-res"]
                                figs_.append(fig_info)
        if figs_:
            fig_caps[article_doi] = figs_
    return fig_caps

def abs_clean(abs):
    new_abs = ""
    if "©" in abs:
        text_ = abs.split("©")[0]
        if text_.endswith("Copyright "):
            text_ = text_.replace("Copyright ", "")
            new_abs += text_
        else:
            new_abs += text_
    else:
        new_abs = abs
    return new_abs

if __name__ == '__main__':
    fig_url = []
    xml_path = r'...\downloads'
    dir_list = os.listdir(xml_path)
    file = list()
    error = []
    corpus = ""
    idx = 0
    for f in tqdm(dir_list):
        try:
            temp = ElsevierXmlReader(os.path.join(xml_path,f)).dic()
            file.append(temp)
            abs = temp["abstract"]
            abs = abs_clean(abs)
            doi = temp["doi"]
            corpus += abs
            corpus += "\n"
            idx += 1
        except:
            error.append(f)
    with open(r"...\all_abstract_clean.txt", "w+",encoding="utf-8") as p:
        p.write(corpus)
    with open(r...\article_abstracts.json", "w+",encoding="utf-8") as p:
        json.dump(file, p)
